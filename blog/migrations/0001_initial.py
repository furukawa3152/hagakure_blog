# Generated by Django 4.2.20 on 2025-05-02 15:54

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0026_delete_uploadedimage'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=80, unique=True)),
            ],
            options={
                'verbose_name': 'ブログチャンネル',
                'verbose_name_plural': 'ブログチャンネル',
            },
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('rich_text', 0), ('markdown', 1), ('image', 4), ('code', 7)], block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {'blank': True, 'features': ['h2', 'h3', 'bold', 'italic', 'ol', 'ul', 'embed', 'image', 'link', 'document-link', 'code', 'blockquote'], 'label': 'テキスト'}), 1: ('wagtailmarkdown.blocks.MarkdownBlock', (), {'blank': True, 'label': 'マークダウン'}), 2: ('wagtail.images.blocks.ImageChooserBlock', (), {'label': '画像', 'required': True}), 3: ('wagtail.blocks.CharBlock', (), {'label': 'キャプション', 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('image', 2), ('caption', 3)]], {'blank': True, 'label': '画像'}), 5: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('bash', 'Bash/Shell'), ('css', 'CSS'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('sql', 'SQL')], 'help_text': 'Coding language', 'identifier': 'language', 'label': 'Language'}), 6: ('wagtail.blocks.TextBlock', (), {'identifier': 'code', 'label': 'Code'}), 7: ('wagtail.blocks.StructBlock', [[('language', 5), ('code', 6)]], {'blank': True, 'default_language': 'python', 'label': 'コード'})})),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blog.blogchannel')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('blogpage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.blogpage', verbose_name='ブログ記事')),
            ],
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blogpage',
            name='thumbnail',
            field=models.ForeignKey(blank=True, max_length=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(fields=('blogpage', 'ip_address'), name='like_unique'),
        ),
    ]
